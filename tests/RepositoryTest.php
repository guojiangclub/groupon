<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/2/5
 * Time: 16:40
 */
use Illuminate\Foundation\Testing\DatabaseMigrations;
//use Mockery;


class RepositoryTest extends \Orchestra\Testbench\TestCase
{
    use DatabaseMigrations;

    public $grouponRepository;

    public $grouponItemRepository;

    protected function getEnvironmentSetUp($app)
    {
        // Setup default database to use sqlite :memory:
        $app['config']->set('database.default', 'testing');
        $app['config']->set('database.connections.testing', [
            'driver' => 'sqlite',
            'database' => ':memory:',
        ]);
        $app['config']->set('repository.cache.enabled', true);

    }
    protected function loadMigrationsFrom($app)
    {
        $this->artisan('migrate', ['--database' => 'testing']);
    }
    protected function getPackageProviders($app)
    {
        return [
            Prettus\Repository\Providers\RepositoryServiceProvider::class
            , Orchestra\Database\ConsoleServiceProvider::class
            ,iBrand\Scheduling\ServiceProvider::class
            , iBrand\Component\Groupon\GrouponServiceProvider::class
           ];

    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->loadMigrationsFrom(__DIR__ . '/database');

        $this->grouponRepository = $this->app->make(\iBrand\Component\Groupon\Repositories\GrouponRepository::class);

        $this->grouponItemRepository = $this->app->make(\iBrand\Component\Groupon\Repositories\GrouponItemRepository::class);
    }






    public function testGetGrouponById()
    {

        //test null groupon
        $groupon=$this->grouponRepository->getGrouponById(1);

        $this->assertNull($groupon);

        //test create groupon
        $attr_groupon=['title'=>'test1','status'=>1,'auto_close'=>0,'starts_at'=>'2018-01-26 10:49:00','ends_at'=>'2050-02-30 10:49:00'];

        $res_groupon=$this->grouponRepository->create($attr_groupon);

        $this->assertEquals('iBrand\Component\Groupon\Models\Groupon',get_class($res_groupon));

        $this->assertEquals(1,$res_groupon->id);

        //test create groupon_item
        $attr_groupon_item=['groupon_id'=>1,'goods_id'=>1,'number'=>2,'manx_number'=>10,'groupon_price'=>'100.00','status'=>1];

        $res_groupon_item=$this->grouponItemRepository->create($attr_groupon_item);

        $this->assertEquals('iBrand\Component\Groupon\Models\GrouponItem',get_class($res_groupon_item));

        $this->assertEquals(1,$res_groupon_item->id);



    }
}